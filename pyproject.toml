[project]
name = "multi-cloud-agent"
version = "1.0.0"
description = "Enterprise-grade multi-cloud agent for database operations with comprehensive observability"
authors = [
    { name = "Shawn Albert", email = "contact@shawn-albert.com" }
]
requires-python = ">=3.13"
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["ai", "multi-cloud", "azure", "gcp", "observability"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pydantic>=2.0.0",
    "pydantic-ai[logfire]>=0.0.15",
    "google-cloud-bigquery>=3.11.0",
    "pyodbc>=4.0.39",
    "azure-identity>=1.13.0",
    "azure-keyvault-secrets>=4.7.0",
    "python-dotenv>=1.0.0",
    "asyncpg>=0.29.0",
    "logfire>=0.8.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation>=0.40b0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",   # pycodestyle
    "F",   # Pyflakes
    "B",   # flake8-bugbear
    "I",   # isort
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "RUF", # Ruff-specific rules
]
ignore = []

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["multi_cloud_agent"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=src --cov-report=term-missing"